// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: arithmetic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arithmetic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_arithmetic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_arithmetic_proto_rawDescGZIP(), []int{0}
}

func (x *Answer) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A int32 `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arithmetic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_arithmetic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_arithmetic_proto_rawDescGZIP(), []int{1}
}

func (x *Parameters) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *Parameters) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

var File_arithmetic_proto protoreflect.FileDescriptor

var file_arithmetic_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x1e, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62,
	0x32, 0xbc, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arithmetic_proto_rawDescOnce sync.Once
	file_arithmetic_proto_rawDescData = file_arithmetic_proto_rawDesc
)

func file_arithmetic_proto_rawDescGZIP() []byte {
	file_arithmetic_proto_rawDescOnce.Do(func() {
		file_arithmetic_proto_rawDescData = protoimpl.X.CompressGZIP(file_arithmetic_proto_rawDescData)
	})
	return file_arithmetic_proto_rawDescData
}

var file_arithmetic_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_arithmetic_proto_goTypes = []interface{}{
	(*Answer)(nil),     // 0: pb.Answer
	(*Parameters)(nil), // 1: pb.Parameters
}
var file_arithmetic_proto_depIdxs = []int32{
	1, // 0: pb.ArithmeticService.Addition:input_type -> pb.Parameters
	1, // 1: pb.ArithmeticService.Subtraction:input_type -> pb.Parameters
	1, // 2: pb.ArithmeticService.Multiplication:input_type -> pb.Parameters
	1, // 3: pb.ArithmeticService.Division:input_type -> pb.Parameters
	0, // 4: pb.ArithmeticService.Addition:output_type -> pb.Answer
	0, // 5: pb.ArithmeticService.Subtraction:output_type -> pb.Answer
	0, // 6: pb.ArithmeticService.Multiplication:output_type -> pb.Answer
	0, // 7: pb.ArithmeticService.Division:output_type -> pb.Answer
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_arithmetic_proto_init() }
func file_arithmetic_proto_init() {
	if File_arithmetic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arithmetic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arithmetic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arithmetic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_arithmetic_proto_goTypes,
		DependencyIndexes: file_arithmetic_proto_depIdxs,
		MessageInfos:      file_arithmetic_proto_msgTypes,
	}.Build()
	File_arithmetic_proto = out.File
	file_arithmetic_proto_rawDesc = nil
	file_arithmetic_proto_goTypes = nil
	file_arithmetic_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ArithmeticServiceClient is the client API for ArithmeticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithmeticServiceClient interface {
	Addition(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error)
	Subtraction(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error)
	Multiplication(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error)
	Division(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error)
}

type arithmeticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArithmeticServiceClient(cc grpc.ClientConnInterface) ArithmeticServiceClient {
	return &arithmeticServiceClient{cc}
}

func (c *arithmeticServiceClient) Addition(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/Addition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticServiceClient) Subtraction(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/Subtraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticServiceClient) Multiplication(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/Multiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithmeticServiceClient) Division(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/pb.ArithmeticService/Division", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticServiceServer is the server API for ArithmeticService service.
type ArithmeticServiceServer interface {
	Addition(context.Context, *Parameters) (*Answer, error)
	Subtraction(context.Context, *Parameters) (*Answer, error)
	Multiplication(context.Context, *Parameters) (*Answer, error)
	Division(context.Context, *Parameters) (*Answer, error)
}

// UnimplementedArithmeticServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArithmeticServiceServer struct {
}

func (*UnimplementedArithmeticServiceServer) Addition(context.Context, *Parameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addition not implemented")
}
func (*UnimplementedArithmeticServiceServer) Subtraction(context.Context, *Parameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtraction not implemented")
}
func (*UnimplementedArithmeticServiceServer) Multiplication(context.Context, *Parameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplication not implemented")
}
func (*UnimplementedArithmeticServiceServer) Division(context.Context, *Parameters) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Division not implemented")
}

func RegisterArithmeticServiceServer(s *grpc.Server, srv ArithmeticServiceServer) {
	s.RegisterService(&_ArithmeticService_serviceDesc, srv)
}

func _ArithmeticService_Addition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).Addition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/Addition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).Addition(ctx, req.(*Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticService_Subtraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).Subtraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/Subtraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).Subtraction(ctx, req.(*Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticService_Multiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).Multiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/Multiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).Multiplication(ctx, req.(*Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArithmeticService_Division_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServiceServer).Division(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ArithmeticService/Division",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServiceServer).Division(ctx, req.(*Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArithmeticService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ArithmeticService",
	HandlerType: (*ArithmeticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addition",
			Handler:    _ArithmeticService_Addition_Handler,
		},
		{
			MethodName: "Subtraction",
			Handler:    _ArithmeticService_Subtraction_Handler,
		},
		{
			MethodName: "Multiplication",
			Handler:    _ArithmeticService_Multiplication_Handler,
		},
		{
			MethodName: "Division",
			Handler:    _ArithmeticService_Division_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arithmetic.proto",
}
